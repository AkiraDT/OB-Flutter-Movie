// Mocks generated by Mockito 5.0.12 from annotations
// in moviedb/test/screens/movie_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviedb/core/models/async_state.dart' as _i2;
import 'package:moviedb/core/models/movie.dart' as _i8;
import 'package:moviedb/core/models/movie_cast.dart' as _i12;
import 'package:moviedb/core/models/movie_detail.dart' as _i3;
import 'package:moviedb/core/models/movie_favourite.dart' as _i13;
import 'package:moviedb/core/models/movie_video.dart' as _i4;
import 'package:moviedb/core/services/movie_service.dart' as _i11;
import 'package:moviedb/movie/widgets/popular/popular_movies_view_model.dart'
    as _i10;
import 'package:moviedb/movie/widgets/upcoming/upcoming_movies_view_model.dart'
    as _i5;
import 'package:state_notifier/state_notifier.dart' as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAsyncState<T> extends _i1.Fake implements _i2.AsyncState<T> {}

class _FakeMovieDetail extends _i1.Fake implements _i3.MovieDetail {}

class _FakeMovieVideo extends _i1.Fake implements _i4.MovieVideo {}

/// A class which mocks [UpcomingMoviesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpcomingMoviesViewModel extends _i1.Mock
    implements _i5.UpcomingMoviesViewModel {
  MockUpcomingMoviesViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i6.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i7.Stream<_i2.AsyncState<List<_i8.Movie>>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncState<List<_i8.Movie>>>.empty())
          as _i7.Stream<_i2.AsyncState<List<_i8.Movie>>>);
  @override
  _i2.AsyncState<List<_i8.Movie>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncState<List<_i8.Movie>>())
          as _i2.AsyncState<List<_i8.Movie>>);
  @override
  set state(_i2.AsyncState<List<_i8.Movie>>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncState<List<_i8.Movie>> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncState<List<_i8.Movie>>())
          as _i2.AsyncState<List<_i8.Movie>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void loadData() => super.noSuchMethod(Invocation.method(#loadData, []),
      returnValueForMissingStub: null);
  @override
  _i6.RemoveListener addListener(
          _i9.Listener<_i2.AsyncState<List<_i8.Movie>>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i6.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [PopularMoviesViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesViewModel extends _i1.Mock
    implements _i10.PopularMoviesViewModel {
  MockPopularMoviesViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i6.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i7.Stream<_i2.AsyncState<List<_i8.Movie>>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncState<List<_i8.Movie>>>.empty())
          as _i7.Stream<_i2.AsyncState<List<_i8.Movie>>>);
  @override
  _i2.AsyncState<List<_i8.Movie>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncState<List<_i8.Movie>>())
          as _i2.AsyncState<List<_i8.Movie>>);
  @override
  set state(_i2.AsyncState<List<_i8.Movie>>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncState<List<_i8.Movie>> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncState<List<_i8.Movie>>())
          as _i2.AsyncState<List<_i8.Movie>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.RemoveListener addListener(
          _i9.Listener<_i2.AsyncState<List<_i8.Movie>>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i6.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [MovieService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieService extends _i1.Mock implements _i11.MovieService {
  MockMovieService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i8.Movie>> getPopularMovie(int? page) =>
      (super.noSuchMethod(Invocation.method(#getPopularMovie, [page]),
              returnValue: Future<List<_i8.Movie>>.value(<_i8.Movie>[]))
          as _i7.Future<List<_i8.Movie>>);
  @override
  _i7.Future<List<_i8.Movie>> getUpcoming(int? page, int? pageSize) =>
      (super.noSuchMethod(Invocation.method(#getUpcoming, [page, pageSize]),
              returnValue: Future<List<_i8.Movie>>.value(<_i8.Movie>[]))
          as _i7.Future<List<_i8.Movie>>);
  @override
  _i7.Future<_i3.MovieDetail> getMovieDetail(String? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [movieId]),
              returnValue: Future<_i3.MovieDetail>.value(_FakeMovieDetail()))
          as _i7.Future<_i3.MovieDetail>);
  @override
  _i7.Future<_i4.MovieVideo> getMovieVideo(String? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieVideo, [movieId]),
              returnValue: Future<_i4.MovieVideo>.value(_FakeMovieVideo()))
          as _i7.Future<_i4.MovieVideo>);
  @override
  _i7.Future<List<_i12.MovieCast>> getMovieCast(String? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieCast, [movieId]),
              returnValue:
                  Future<List<_i12.MovieCast>>.value(<_i12.MovieCast>[]))
          as _i7.Future<List<_i12.MovieCast>>);
  @override
  _i7.Future<List<_i13.MovieFavourite>> getFavoriteMovie() =>
      (super.noSuchMethod(Invocation.method(#getFavoriteMovie, []),
              returnValue: Future<List<_i13.MovieFavourite>>.value(
                  <_i13.MovieFavourite>[]))
          as _i7.Future<List<_i13.MovieFavourite>>);
}
